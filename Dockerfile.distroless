# Ultra-optimized production Dockerfile using distroless
# This creates the smallest possible secure image

# Stage 1: Build stage
FROM node:22-alpine AS builder

WORKDIR /app

# Install pnpm - use specific version for reproducibility
RUN corepack enable && corepack prepare pnpm@9.12.3 --activate

# Install build dependencies
RUN apk add --no-cache python3 make g++ git

# Copy package files and install dependencies
COPY package.json pnpm-lock.yaml* ./
RUN pnpm install --no-frozen-lockfile

# Copy source and build
COPY tsconfig.json ./
COPY src ./src
RUN pnpm run build

# Prune to production dependencies only
RUN pnpm prune --prod

# Stage 2: Production runtime (distroless for minimal attack surface)
FROM gcr.io/distroless/nodejs22-debian12:nonroot

WORKDIR /app

# Copy only necessary files from builder
COPY --from=builder --chown=nonroot:nonroot /app/node_modules ./node_modules
COPY --from=builder --chown=nonroot:nonroot /app/dist ./dist
COPY --from=builder --chown=nonroot:nonroot /app/package.json ./

# Copy config file
COPY --chown=nonroot:nonroot mcp.config.json ./

# Expose port
EXPOSE 3000

# Environment variables
ENV NODE_ENV=production \
    PORT=3000 \
    HOST=0.0.0.0

# User is already nonroot in distroless

# Start application
CMD ["dist/server.js"]